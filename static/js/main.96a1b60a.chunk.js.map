{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","id","email","alt","src","CardList","robots","map","robot","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","userData","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAiBeA,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,kBAAC,WAAD,KACI,0BAAMC,UAAU,OACZ,2BACIA,UAAU,mCACVC,KAAK,OACLC,YAAY,YACZC,SAAUJ,OCMfK,EAdF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MACtB,OACI,kBAAC,WAAD,KACA,yBAAKP,UAAU,uDACP,yBAAKQ,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,mBACrB,6BACI,4BAAKD,GACL,2BAAIE,OCcTG,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,kBAAC,WAAD,KAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,kBAAC,EAAD,CACIC,IAAMD,EACNR,GAAKO,EAAMP,GACXD,KAAOQ,EAAMR,KACbE,MAAQM,EAAMN,aCC3BS,EAbA,SAACC,GACZ,OACI,kBAAC,WAAD,KACI,yBAAKC,MAAO,CACRC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAENJ,EAAMK,YCYTC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,gBACKO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,6DAEJG,KAAKX,MAAMK,a,GAhBEQ,aCyDbC,G,wDAlDX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAjB1C,EAAKZ,MAAQ,CACTb,OAAQ,GACRuB,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACH,EAAKZ,SAAS,CAAElB,OAAQ8B,S,+BAQ1B,IAAD,EAC2Bb,KAAKJ,MAA7Bb,EADH,EACGA,OAAQuB,EADX,EACWA,YACVQ,EAAiB/B,EAAOgC,QAAQ,SAAA9B,GAClC,OAAOA,EAAMR,KAAKuC,cAAcC,SAASX,EAAYU,kBAEzD,OAAIjC,EAAOmC,OAOH,kBAAC,WAAD,KACI,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAe6B,KAAKI,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrB,OAAS+B,QAXnC,wBAAI1C,UAAU,MAAd,kB,GA/BE8B,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.96a1b60a.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <Fragment>\r\n            <form className='pa2'>\r\n                <input\r\n                    className='pa3 ba b--green bg-lightest-blue'\r\n                    type=\"text\" \r\n                    placeholder=\"search...\" \r\n                    onChange={searchChange}\r\n                />\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, {Fragment} from 'react';\r\n\r\nconst Card = ({ name, id, email}) => {\r\n    return(\r\n        <Fragment>\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img alt='robots' src ={`https://robohash.org/${id}?size=200x200`}/>\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n        </Fragment> \r\n    );\r\n}\r\n\r\nexport default Card;","import React, {Fragment} from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return(\r\n        <Fragment>\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={ i }\r\n                            id={ robot.id }\r\n                            name={ robot.name } \r\n                            email={ robot.email }\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <Fragment>\r\n            <div style={{\r\n                overflowY: \"scroll\",\r\n                border: \"3px solid black\",\r\n                height: \"395px\"\r\n            }}>\r\n                { props.children }\r\n            </div>\r\n        </Fragment> \r\n    )\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Ooops... Something went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Fragment, Component } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then( userData => {\r\n                this.setState({ robots: userData });\r\n            })\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        if(!robots.length) {\r\n            return(\r\n                <h1 className=\"tc\">Loading...</h1>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <Fragment>\r\n                    <div className='tc'>\r\n                        <h1 className=\"f1\">ROBOFRIENDS</h1>\r\n                        <SearchBox searchChange={ this.onSearchChange }/>\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={ filteredRobots } />\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </div>\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}